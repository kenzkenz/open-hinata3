import store from '@/store'
import maplibregl from 'maplibre-gl'
import { db } from '@/firebase'
import { watch } from 'vue'
import { groupGeojson } from '@/js/layers'

// Firestore „Å´‰øùÂ≠ò
async function saveGroupGeojson(groupId, layerId, geojson) {
    if (!groupId) {
        console.warn('„Ç∞„É´„Éº„ÉóID„ÅåÊú™ÂÆöÁæ©„ÅÆ„Åü„ÇÅ‰øùÂ≠ò„Çπ„Ç≠„ÉÉ„Éó')
        return
    }
    const docRef = db.collection('groups').doc(groupId)
    await docRef.set(
        {
            layers: {
                [layerId]: geojson
            }
        },
        { merge: true }
    )
}

// Firestore „Åã„ÇâË™≠„ÅøËæº„Åø
async function loadGroupGeojson(groupId, layerId) {
    if (!groupId) {
        console.warn('„Ç∞„É´„Éº„ÉóID„ÅåÊú™ÂÆöÁæ©„ÅÆ„Åü„ÇÅË™≠„ÅøËæº„Åø„Çπ„Ç≠„ÉÉ„Éó')
        return null
    }
    const docRef = db.collection('groups').doc(groupId)
    const snap = await docRef.get()
    if (snap.exists) {
        return snap.data()?.layers?.[layerId] || null
    } else {
        console.warn('„Ç∞„É´„Éº„Éó„Éá„Éº„Çø„ÅåFirestore„Å´Â≠òÂú®„Åó„Åæ„Åõ„Çì')
        return null
    }
}

function deleteAllPoints() {
    if (!confirm('Êú¨ÂΩì„Å´„Åô„Åπ„Å¶„ÅÆ„Éù„Ç§„É≥„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) return

    groupGeojson.value.features = []

    const map = store.state.map01
    if (map && map.getSource('group-points-source')) {
        map.getSource('group-points-source').setData(groupGeojson.value)
    }

    const groupId = store.state.currentGroupName
    saveGroupGeojson(groupId, 'points', groupGeojson.value)

    console.log('‚úÖ ÂÖ®„Éù„Ç§„É≥„ÉàÂâäÈô§ÂÆå‰∫Ü')
}

export default function useGloupLayer() {
    watch(
        () => [store.state.map01, store.state.currentGroupName],
        async ([map01, groupId]) => {
            if (!map01 || !groupId) {
                console.warn('map01 or groupId „ÅåÊú™ÂÆöÁæ©')
                return
            }

            const layerId = 'points'

            const setupMapLogic = async () => {
                // 1. Firestore„Åã„ÇâË™≠„ÅøËæº„Åø
                const geojson = await loadGroupGeojson(groupId, layerId)
                if (geojson) {
                    groupGeojson.value = geojson
                }

                // 2. „ÇΩ„Éº„ÇπËøΩÂä† or Êõ¥Êñ∞
                if (!map01.getSource('group-points-source')) {
                    map01.addSource('group-points-source', {
                        type: 'geojson',
                        data: groupGeojson.value
                    })
                } else {
                    map01.getSource('group-points-source')?.setData(groupGeojson.value)
                }

                // 3. „É¨„Ç§„É§„ÉºËøΩÂä†Áõ£Ë¶ñÔºã„ÇØ„É™„ÉÉ„ÇØÁôªÈå≤
                let clickRegistered = false
                const checkLayerInterval = setInterval(() => {
                    if (map01.getLayer('oh-group-points-layer') && !clickRegistered) {
                        console.log('‚úÖ „É¨„Ç§„É§„ÉºÊ§úÁü• ‚Üí „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„ÉàÁôªÈå≤')

                        // ‚úÖ „Éù„Ç§„É≥„Éà„ÇíÂº∑Âà∂ÊèèÁîªÔºàÂæ©Ê¥ª„Åï„Åõ„ÇãÔºâ
                        const source = map01.getSource('group-points-source')
                        if (source) {
                            source.setData(groupGeojson.value)
                        }

                        // ‚úÖ „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„ÉàÁôªÈå≤
                        map01.on('click', (e) => {
                            // „ÇØ„É™„ÉÉ„ÇØ„Åó„Åü‰ΩçÁΩÆ„Å´Êó¢Â≠ò„Éù„Ç§„É≥„Éà„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
                            const features = map01.queryRenderedFeatures(e.point, {
                                layers: ['oh-group-points-layer']
                            })
                            if (features.length > 0) return
                            if (!e.lngLat) return
                            const { lng, lat } = e.lngLat
                            const pointFeature = {
                                type: 'Feature',
                                geometry: {
                                    type: 'Point',
                                    coordinates: [lng, lat]
                                },
                                properties: {
                                    id: Date.now(),
                                    createdAt: Date.now()
                                }
                            }
                            groupGeojson.value.features.push(pointFeature)
                            map01.getSource('group-points-source')?.setData(groupGeojson.value)
                            saveGroupGeojson(groupId, layerId, groupGeojson.value)
                        })

                        const mapElm = document.querySelector('#map01')
                        // „Åô„Åß„Å´ÁôªÈå≤„Åï„Çå„Å¶„Åü„ÇâÂâäÈô§ÔºàÂêå„ÅòÈñ¢Êï∞„Åò„ÇÉ„Å™„ÅÑ„Å®Â§ñ„Çå„Å™„ÅÑ„ÅÆ„Åß‚Üì„Å∏Ôºâ
                        mapElm.removeEventListener('click', handleMapClick) // ‚Üê ‰∫ãÂâç„Å´ remove „Åó„Å¶‚Ä¶
                        function handleMapClick(e) {
                            if (e.target && e.target.classList.contains('point-remove')) {
                                const id = Number(e.target.getAttribute("data-id"))
                                if (!id) return
                                // üî• ÂâäÈô§ÂÆüË°å
                                groupGeojson.value.features = groupGeojson.value.features.filter(
                                    (f) => f.properties.id !== id
                                )
                                map01.getSource('group-points-source')?.setData(groupGeojson.value)
                                saveGroupGeojson(store.state.currentGroupName, 'points', groupGeojson.value)

                            }
                        }
                        mapElm.addEventListener('click', handleMapClick)

                        clickRegistered = true
                        clearInterval(checkLayerInterval)
                    }
                }, 300) // 0.3Áßí„Åî„Å®„Å´„É¨„Ç§„É§„ÉºÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
            }

            if (map01.loaded()) {
                await setupMapLogic()
            } else {
                map01.on('load', setupMapLogic)
            }

        },
        { immediate: true }
    )
}
